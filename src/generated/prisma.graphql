# source: https://us1.prisma.sh/chittatosh-undirwade-78f1b4/booktrade/dev
# timestamp: Sun Jun 03 2018 01:29:47 GMT+0530 (India Standard Time)

type AggregateBook {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  googleId: String!
  bookTitle: String!
  googleLink: String!
  bookThumbnail: String
  bookRating: Float
  ratingsCount: Float
  authorList: [String!]
  publicationDate: String
  categoryList: [String!]
  bookOwner(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateauthorListInput {
  set: [String!]
}

input BookCreatecategoryListInput {
  set: [String!]
}

input BookCreateInput {
  googleId: String!
  bookTitle: String!
  googleLink: String!
  bookThumbnail: String
  bookRating: Float
  ratingsCount: Float
  publicationDate: String
  authorList: BookCreateauthorListInput
  categoryList: BookCreatecategoryListInput
  bookOwner: UserCreateOneWithoutMyBookListInput!
}

input BookCreateManyWithoutBookOwnerInput {
  create: [BookCreateWithoutBookOwnerInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateWithoutBookOwnerInput {
  googleId: String!
  bookTitle: String!
  googleLink: String!
  bookThumbnail: String
  bookRating: Float
  ratingsCount: Float
  publicationDate: String
  authorList: BookCreateauthorListInput
  categoryList: BookCreatecategoryListInput
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  googleId_ASC
  googleId_DESC
  bookTitle_ASC
  bookTitle_DESC
  googleLink_ASC
  googleLink_DESC
  bookThumbnail_ASC
  bookThumbnail_DESC
  bookRating_ASC
  bookRating_DESC
  ratingsCount_ASC
  ratingsCount_DESC
  publicationDate_ASC
  publicationDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookPreviousValues {
  id: ID!
  googleId: String!
  bookTitle: String!
  googleLink: String!
  bookThumbnail: String
  bookRating: Float
  ratingsCount: Float
  authorList: [String!]
  publicationDate: String
  categoryList: [String!]
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateauthorListInput {
  set: [String!]
}

input BookUpdatecategoryListInput {
  set: [String!]
}

input BookUpdateInput {
  googleId: String
  bookTitle: String
  googleLink: String
  bookThumbnail: String
  bookRating: Float
  ratingsCount: Float
  publicationDate: String
  authorList: BookUpdateauthorListInput
  categoryList: BookUpdatecategoryListInput
  bookOwner: UserUpdateOneWithoutMyBookListInput
}

input BookUpdateManyWithoutBookOwnerInput {
  create: [BookCreateWithoutBookOwnerInput!]
  connect: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutBookOwnerInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutBookOwnerInput!]
}

input BookUpdateWithoutBookOwnerDataInput {
  googleId: String
  bookTitle: String
  googleLink: String
  bookThumbnail: String
  bookRating: Float
  ratingsCount: Float
  publicationDate: String
  authorList: BookUpdateauthorListInput
  categoryList: BookUpdatecategoryListInput
}

input BookUpdateWithWhereUniqueWithoutBookOwnerInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutBookOwnerDataInput!
}

input BookUpsertWithWhereUniqueWithoutBookOwnerInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutBookOwnerDataInput!
  create: BookCreateWithoutBookOwnerInput!
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  googleId: String

  """All values that are not equal to given value."""
  googleId_not: String

  """All values that are contained in given list."""
  googleId_in: [String!]

  """All values that are not contained in given list."""
  googleId_not_in: [String!]

  """All values less than the given value."""
  googleId_lt: String

  """All values less than or equal the given value."""
  googleId_lte: String

  """All values greater than the given value."""
  googleId_gt: String

  """All values greater than or equal the given value."""
  googleId_gte: String

  """All values containing the given string."""
  googleId_contains: String

  """All values not containing the given string."""
  googleId_not_contains: String

  """All values starting with the given string."""
  googleId_starts_with: String

  """All values not starting with the given string."""
  googleId_not_starts_with: String

  """All values ending with the given string."""
  googleId_ends_with: String

  """All values not ending with the given string."""
  googleId_not_ends_with: String
  bookTitle: String

  """All values that are not equal to given value."""
  bookTitle_not: String

  """All values that are contained in given list."""
  bookTitle_in: [String!]

  """All values that are not contained in given list."""
  bookTitle_not_in: [String!]

  """All values less than the given value."""
  bookTitle_lt: String

  """All values less than or equal the given value."""
  bookTitle_lte: String

  """All values greater than the given value."""
  bookTitle_gt: String

  """All values greater than or equal the given value."""
  bookTitle_gte: String

  """All values containing the given string."""
  bookTitle_contains: String

  """All values not containing the given string."""
  bookTitle_not_contains: String

  """All values starting with the given string."""
  bookTitle_starts_with: String

  """All values not starting with the given string."""
  bookTitle_not_starts_with: String

  """All values ending with the given string."""
  bookTitle_ends_with: String

  """All values not ending with the given string."""
  bookTitle_not_ends_with: String
  googleLink: String

  """All values that are not equal to given value."""
  googleLink_not: String

  """All values that are contained in given list."""
  googleLink_in: [String!]

  """All values that are not contained in given list."""
  googleLink_not_in: [String!]

  """All values less than the given value."""
  googleLink_lt: String

  """All values less than or equal the given value."""
  googleLink_lte: String

  """All values greater than the given value."""
  googleLink_gt: String

  """All values greater than or equal the given value."""
  googleLink_gte: String

  """All values containing the given string."""
  googleLink_contains: String

  """All values not containing the given string."""
  googleLink_not_contains: String

  """All values starting with the given string."""
  googleLink_starts_with: String

  """All values not starting with the given string."""
  googleLink_not_starts_with: String

  """All values ending with the given string."""
  googleLink_ends_with: String

  """All values not ending with the given string."""
  googleLink_not_ends_with: String
  bookThumbnail: String

  """All values that are not equal to given value."""
  bookThumbnail_not: String

  """All values that are contained in given list."""
  bookThumbnail_in: [String!]

  """All values that are not contained in given list."""
  bookThumbnail_not_in: [String!]

  """All values less than the given value."""
  bookThumbnail_lt: String

  """All values less than or equal the given value."""
  bookThumbnail_lte: String

  """All values greater than the given value."""
  bookThumbnail_gt: String

  """All values greater than or equal the given value."""
  bookThumbnail_gte: String

  """All values containing the given string."""
  bookThumbnail_contains: String

  """All values not containing the given string."""
  bookThumbnail_not_contains: String

  """All values starting with the given string."""
  bookThumbnail_starts_with: String

  """All values not starting with the given string."""
  bookThumbnail_not_starts_with: String

  """All values ending with the given string."""
  bookThumbnail_ends_with: String

  """All values not ending with the given string."""
  bookThumbnail_not_ends_with: String
  bookRating: Float

  """All values that are not equal to given value."""
  bookRating_not: Float

  """All values that are contained in given list."""
  bookRating_in: [Float!]

  """All values that are not contained in given list."""
  bookRating_not_in: [Float!]

  """All values less than the given value."""
  bookRating_lt: Float

  """All values less than or equal the given value."""
  bookRating_lte: Float

  """All values greater than the given value."""
  bookRating_gt: Float

  """All values greater than or equal the given value."""
  bookRating_gte: Float
  ratingsCount: Float

  """All values that are not equal to given value."""
  ratingsCount_not: Float

  """All values that are contained in given list."""
  ratingsCount_in: [Float!]

  """All values that are not contained in given list."""
  ratingsCount_not_in: [Float!]

  """All values less than the given value."""
  ratingsCount_lt: Float

  """All values less than or equal the given value."""
  ratingsCount_lte: Float

  """All values greater than the given value."""
  ratingsCount_gt: Float

  """All values greater than or equal the given value."""
  ratingsCount_gte: Float
  publicationDate: String

  """All values that are not equal to given value."""
  publicationDate_not: String

  """All values that are contained in given list."""
  publicationDate_in: [String!]

  """All values that are not contained in given list."""
  publicationDate_not_in: [String!]

  """All values less than the given value."""
  publicationDate_lt: String

  """All values less than or equal the given value."""
  publicationDate_lte: String

  """All values greater than the given value."""
  publicationDate_gt: String

  """All values greater than or equal the given value."""
  publicationDate_gte: String

  """All values containing the given string."""
  publicationDate_contains: String

  """All values not containing the given string."""
  publicationDate_not_contains: String

  """All values starting with the given string."""
  publicationDate_starts_with: String

  """All values not starting with the given string."""
  publicationDate_not_starts_with: String

  """All values ending with the given string."""
  publicationDate_ends_with: String

  """All values not ending with the given string."""
  publicationDate_not_ends_with: String
  bookOwner: UserWhereInput
}

input BookWhereUniqueInput {
  id: ID
  googleId: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  createUser(data: UserCreateInput!): User!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteUser(where: UserWhereUniqueInput!): User
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyBooks(data: BookUpdateInput!, where: BookWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  book(where: BookWhereUniqueInput!): Book
  user(where: UserWhereUniqueInput!): User
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  userName: String!
  myBookList(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  userName: String!
  myBookList: BookCreateManyWithoutBookOwnerInput
}

input UserCreateOneWithoutMyBookListInput {
  create: UserCreateWithoutMyBookListInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMyBookListInput {
  email: String!
  password: String!
  userName: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  userName_ASC
  userName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  userName: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  userName: String
  myBookList: BookUpdateManyWithoutBookOwnerInput
}

input UserUpdateOneWithoutMyBookListInput {
  create: UserCreateWithoutMyBookListInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutMyBookListDataInput
  upsert: UserUpsertWithoutMyBookListInput
}

input UserUpdateWithoutMyBookListDataInput {
  email: String
  password: String
  userName: String
}

input UserUpsertWithoutMyBookListInput {
  update: UserUpdateWithoutMyBookListDataInput!
  create: UserCreateWithoutMyBookListInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  userName: String

  """All values that are not equal to given value."""
  userName_not: String

  """All values that are contained in given list."""
  userName_in: [String!]

  """All values that are not contained in given list."""
  userName_not_in: [String!]

  """All values less than the given value."""
  userName_lt: String

  """All values less than or equal the given value."""
  userName_lte: String

  """All values greater than the given value."""
  userName_gt: String

  """All values greater than or equal the given value."""
  userName_gte: String

  """All values containing the given string."""
  userName_contains: String

  """All values not containing the given string."""
  userName_not_contains: String

  """All values starting with the given string."""
  userName_starts_with: String

  """All values not starting with the given string."""
  userName_not_starts_with: String

  """All values ending with the given string."""
  userName_ends_with: String

  """All values not ending with the given string."""
  userName_not_ends_with: String
  myBookList_every: BookWhereInput
  myBookList_some: BookWhereInput
  myBookList_none: BookWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
